{"version":3,"sources":["logo.svg","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","initialState","name","clgname","stream","clgyear","email","pass","cpass","nameError","passError","emailError","Login","props","state","handleChange","bind","handleSubmit","this","includes","setState","event","target","value","preventDefault","validate","onSubmit","className","type","onChange","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0da1dd56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './App.css'\r\n\r\n\r\nfunction Header()\r\n{\r\n    return (\r\n        <div>\r\n            <header>\r\n              <h2>\r\n                  Learn From Home\r\n              </h2>\r\n              <p>College Student , Willing to teach ? </p>\r\n              </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './App.css'\r\n\r\nvar initialState={\r\n    name:\"\",\r\n    clgname:\"\",\r\n    stream:\"\",\r\n    clgyear:\"\",\r\n    email:\"\",\r\n    pass:\"\",\r\n    cpass:\"\",\r\n    nameError:\"\",\r\n    passError:\"\",\r\n    emailError:\"\"\r\n}\r\n\r\nclass Login extends React.Component\r\n{\r\n    \r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state=initialState;\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n    validate()\r\n    {\r\n        let  nameError=\"\";\r\n        let passError=\"\";\r\n        let emailError=\"\";\r\n        if(!this.state.email.includes('@'))\r\n        {\r\n            emailError=\"Given Email is inappropriate\"\r\n            this.setState({emailError})  ;\r\n            return false;\r\n        }\r\n        if(this.state.pass!=this.state.cpass)\r\n        {\r\n            passError=\"Filled password does'nt match, make sure your passwords match\"\r\n            this.setState({passError})  ;\r\n            return false;\r\n        } \r\n        if(this.state.name===\"\" || this.state.clgname===\"\"  || this.state.pass===\"\" || this.state.cpass===\"\" )     \r\n        {\r\n            nameError=\"This feild is necessary andf is to be filled by the user\";\r\n            this.setState({nameError})  \r\n            return false;\r\n        }\r\n\r\n            return true;\r\n    }\r\n    handleChange(event)\r\n    {\r\n        let target = event.target;\r\n        let value = target.value;\r\n        let name = target.name;\r\n        this.setState({\r\n          [name]: value    });\r\n    }    \r\n    handleSubmit(event)\r\n    {\r\n        event.preventDefault();      \r\n        let isValid=this.validate();\r\n        if(isValid)\r\n        {\r\n            this.setState(initialState)\r\n        }            \r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='form'>\r\n                <h5>* marked are to be filled</h5>\r\n                <br/>\r\n            <label className='label'>\r\n              Full Name*:\r\n              <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange}  className='text'/> \r\n            </label>  \r\n             <div> {this.state.nameError}  </div>\r\n              <br/>\r\n              <label className='label'>\r\n              Email*:\r\n              <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} className='text'/> \r\n            </label>      \r\n            <div> {this.state.emailError}  </div>      \r\n              <br/>\r\n              <label className='label'>  \r\n                  Current Year*:\r\n              <select  value={this.state.clgyear} onChange={this.handleChange}  name=\"clgyear\" className='text'>\r\n              <option value=\"0\">choose your current year</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n               </select>            \r\n            </label>\r\n            <br/>\r\n            <label className='label'> \r\n              College Name*:\r\n              <input type=\"text\" value={this.state.clgname} onChange={this.handleChange} name=\"clgname\" className='text'/> \r\n            </label>\r\n            <div> {this.state.nameError}  </div>\r\n            <br/>\r\n            <label className='label'>\r\n              Stream*:\r\n              <select value={this.state.stream} onChange={this.handleChange} name=\"stream\" className='text'>\r\n                    <option value=\"yoyo\">choose your stream</option>\r\n                    <option value=\"SCIENCE\">SCIENCE</option>\r\n                    <option value=\"ARTS\">ARTS</option>\r\n                    <option value=\"COMMERCE\">COMMERCE</option>                    \r\n               </select> \r\n            </label>\r\n            <br/>\r\n            <label className='label'>\r\n              Password*:\r\n              <input type=\"password\" value={this.state.pass} onChange={this.handleChange} name=\"pass\"  className='text'/ > \r\n            </label>   \r\n            <div> {this.state.nameError}  </div>         \r\n              <br/>\r\n              <label className='label'>\r\n              Confirm Password*:\r\n              <input type=\"password\" value={this.state.cpass} onChange={this.handleChange} name=\"cpass\" className='text'/> \r\n            </label>  \r\n            <div> {this.state.passError}  </div>    \r\n                \r\n              <br/>\r\n              <input type=\"checkbox\"  className='check' />\r\n                <label className='label'>I hearby declare that all my credientials are correct as per my knowledge</label>\r\n              <br/>\r\n            <input type=\"submit\" value=\"Login\" className='button'/>\r\n          </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header'\nimport Login from './Login'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <Header/>\n         <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}